//The Jenkinsfile runs entire build in a golang container and mounts the /var/run/docker.sock file to allow access to the host docker within the container
node('wcm') {
    docker.image('golang:1.15-buster').inside('-u root --net=host -v /var/run/docker.sock:/var/run/docker.sock') {
        environment{
            CGO_ENABLED = 0
            GO111MODULE = on
        }
        stage ('Install Docker Client') {
            sh "apt-get update"
            sh '''
               apt-get install -y \
               apt-transport-https \
               ca-certificates \
               curl \
               gnupg-agent \
               software-properties-common
            '''
            sh "curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -"
            sh '''
               add-apt-repository \
               "deb [arch=amd64] https://download.docker.com/linux/debian \
               $(lsb_release -cs) \
               stable"
            '''
            sh "apt-get update && apt-get install -y docker-ce-cli"
        }
        stage ('Install yq') {
            sh "wget -O /usr/bin/yq https://github.com/mikefarah/yq/releases/download/2.1.2/yq_linux_amd64"
            sh "chmod 555 /usr/bin/yq"
        }
        stage ('Install kubectl') {
            sh "curl -LO https://storage.googleapis.com/kubernetes-release/release/\"\$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)\"/bin/linux/amd64/kubectl"
            sh "chmod +x kubectl && mv kubectl /usr/local/bin/"
        }
        stage ('Install Helm') {
            sh "curl -LO https://git.io/get_helm.sh"
            sh "chmod 700 get_helm.sh"
            sh "./get_helm.sh"
        }
        stage ('Checkout code') {
            checkout scm
        }
        stage ('Install kind') {
             sh "go get -u sigs.k8s.io/kind@v0.8.1"
        }
        stage ('Install cloudtest version 0.2.0') {
            sh "go get github.com/networkservicemesh/cloudtest@v0.2.0"
        }
        try {
            stage ('Run benchmark tests') {
                sh "cloudtest --config .cloudtest-bench.yaml"
            }
        } finally {
            junit '.tests/cloud_test/results/junit-benchmark-tests.xml'
            archiveArtifacts artifacts: '.tests/cloud_test/results/junit-benchmark-tests.xml', allowEmptyArchive: true
        }
        try {
            stage ('Run single cluster tests') {
                sh "cloudtest --config .cloudtest-single-cluster.yaml"
            }
        } finally {
            junit '.tests/cloud_test/results/junit-single-cluster-tests.xml'
            archiveArtifacts artifacts: '.tests/cloud_test/results/junit-single-cluster-tests.xml', fingerprint: true
            archiveArtifacts artifacts: '.tests/cloud_test/**', allowEmptyArchive: true
        }
//         stage ('Run interdomain tests') {
//             sh "cloudtest --config .cloudtest-interdomain.yaml"
//             archiveArtifacts artifacts: '.tests/cloud_test/results/junit-interdomain-tests.xml', fingerprint: true
//             archiveArtifacts artifacts: '.tests/cloud_test/**', allowEmptyArchive: true
//         }
//         stage ('Setup clusters for interdomain tests') {
//             sh "KIND_CLUSTER_NAME=cluster1 make kind-stop"
//             sh "KIND_CLUSTER_NAME=cluster2 make kind-stop"
//             sh "KIND_CLUSTER_NAME=cluster1 make kind-start"
//             sh "KIND_CLUSTER_NAME=cluster2 make kind-start"
//             sh "kubectl config get-contexts"
//             sh "kubectl config use-context kind-cluster1"
//             sh "KIND_CLUSTER_NAME=cluster1 make spire-install"
//             sh "CLUSTER_RULES_PREFIX=kind KIND_CLUSTER_NAME=cluster1 make k8s-config"
//             sh "CLUSTER_RULES_PREFIX=kind KIND_CLUSTER_NAME=cluster1 make k8s-load-images"
//             sh "kubectl config use-context kind-cluster2"
//             sh "KIND_CLUSTER_NAME=cluster2 make spire-install"
//             sh "CLUSTER_RULES_PREFIX=kind KIND_CLUSTER_NAME=cluster2 make k8s-config"
//             sh "CLUSTER_RULES_PREFIX=kind KIND_CLUSTER_NAME=cluster2 make k8s-load-images"
//             sh "KIND_CLUSTER_NAME=cluster1 CONFIG_LOCATION=cluster1-config make kind-export-kubeconfig"
//             sh "KIND_CLUSTER_NAME=cluster2 CONFIG_LOCATION=cluster2-config make kind-export-kubeconfig"
//         }
//         try {
//             stage ('Run TestInterdomainNSCDies') {
//                 dir ('test/integration') {
//                     sh '''
//                        KUBECONFIG_CLUSTER_1=../../cluster1-config \
//                        KUBECONFIG_CLUSTER_2=../../cluster2-config \
//                        go test . -test.timeout 30m0s -count 1 --run "^(TestInterdomainNSCDies)\\z" --tags "interdomain" --test.v
//                     '''
//                 }
//             }
//         } catch (e) {
//             echo e.toString()
//             sh "KIND_CLUSTER_NAME=cluster1 make k8s-reset"
//             sh "KIND_CLUSTER_NAME=cluster2 make k8s-reset"
//         }
//         try {
//             stage ('Run TestInterdomainNSEDies') {
//                 dir ('test/integration') {
//                             sh '''
//                                KUBECONFIG_CLUSTER_1=../../cluster1-config \
//                                KUBECONFIG_CLUSTER_2=../../cluster2-config \
//                                go test . -test.timeout 30m0s -count 1 --run "^(TestInterdomainNSEDies)\\z" --tags "interdomain" --test.v
//                             '''
//                 }
//             }
//         } catch (e) {
//             echo e.toString()
//         }
//         try {
//             stage ('Run TestFloatingInterdomainDieNSE') {
//                 dir ('test/integration') {
//                     sh '''
//                        KUBECONFIG_CLUSTER_1=../../cluster1-config \
//                        KUBECONFIG_CLUSTER_2=../../cluster2-config \
//                        go test . -test.timeout 30m0s -count 1 --run "^(TestFloatingInterdomainDieNSE)\\z" --tags "interdomain" --test.v
//                     '''
//                 }
//             }
//         } catch (e) {
//             echo e.toString()
//             sh "KIND_CLUSTER_NAME=cluster1 make k8s-reset"
//             sh "KIND_CLUSTER_NAME=cluster2 make k8s-reset"
//         }
//         stage ('Cleanup clusters used for interdomain tests') {
//             sh "KIND_CLUSTER_NAME=cluster1 make kind-stop"
//             sh "KIND_CLUSTER_NAME=cluster2 make kind-stop"
//         }
    }
}